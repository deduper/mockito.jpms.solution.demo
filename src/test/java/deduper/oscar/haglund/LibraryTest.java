/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package deduper.oscar.haglund;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.sql.Timestamp;
import java.util.Calendar;


import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.ArgumentMatchers.anyInt;
import java.time.Instant;

@ExtendWith(MockitoExtension.class)
class LibraryTest {

    @Mock
    private Library library;

    @Mock
    private Collaborator collaborator;

    @Captor
    private ArgumentCaptor<Timestamp> dateCaptor;

    @Test void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'");
    }

    @Test
    public void setTimestamp_instant() {
        Instant inputTime = Instant.parse("2018-03-12T10:25:37.386Z");
        when(library.collaborate(anyString())).thenReturn(collaborator);
        Collaborator collaborator = library.collaborate("UPDATE fakeTable SET time = ? WHERE TRUE");

        Confederate confederate = new Confederate( collaborator, "YourSQL" );

        confederate.setTimeStamp( inputTime );

        verify(collaborator).setTimeStamp(anyInt(), dateCaptor.capture(), Mockito.any(Calendar.class));
    }
}
